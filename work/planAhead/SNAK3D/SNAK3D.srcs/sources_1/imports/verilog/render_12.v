/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module render_12 (
    input clk,
    input rst,
    input [11:0] snk_hd_pos,
    input [11:0] snk_bd_pos,
    input [11:0] snk_tl_pos,
    input [11:0] food_pos,
    input wernd,
    output reg [4:0] led_rows_out,
    output reg [24:0] led_cols_out,
    input [3:0] x,
    input [3:0] y,
    input [3:0] z
  );
  
  
  
  localparam NUMBER_ROWS = 3'h5;
  
  localparam NUMBER_COLUMNS = 5'h19;
  
  reg hd_x;
  
  reg hd_y;
  
  reg hd_z;
  
  reg bd_x;
  
  reg bd_y;
  
  reg bd_z;
  
  reg tl_x;
  
  reg tl_y;
  
  reg tl_z;
  
  wire [1-1:0] M_muxclk_value;
  counter_17 muxclk (
    .clk(clk),
    .rst(rst),
    .value(M_muxclk_value)
  );
  reg [124:0] M_snk_hd_state_d, M_snk_hd_state_q = 1'h0;
  reg [124:0] M_snk_bd_state_d, M_snk_bd_state_q = 1'h0;
  reg [124:0] M_snk_tl_state_d, M_snk_tl_state_q = 1'h0;
  reg [124:0] M_food_state_d, M_food_state_q = 1'h0;
  reg [124:0] M_led_state_d, M_led_state_q = 1'h0;
  reg [15:0] M_count_d, M_count_q = 1'h0;
  
  reg [4:0] M_rows_d, M_rows_q = 1'h0;
  reg [24:0] M_cols_d, M_cols_q = 1'h0;
  
  localparam TEMPLATE = 125'h00000000000000000000000000000001;
  
  always @* begin
    M_food_state_d = M_food_state_q;
    M_snk_hd_state_d = M_snk_hd_state_q;
    M_cols_d = M_cols_q;
    M_count_d = M_count_q;
    M_led_state_d = M_led_state_q;
    M_rows_d = M_rows_q;
    
    hd_x = snk_hd_pos[8+3-:4];
    hd_y = snk_hd_pos[4+3-:4];
    hd_z = snk_hd_pos[0+3-:4];
    bd_x = snk_bd_pos[8+3-:4];
    bd_y = snk_bd_pos[4+3-:4];
    bd_z = snk_bd_pos[0+3-:4];
    tl_x = snk_tl_pos[8+3-:4];
    tl_y = snk_tl_pos[4+3-:4];
    tl_z = snk_tl_pos[0+3-:4];
    if (wernd) begin
      M_count_d = (M_count_q + 1'h1);
      M_snk_hd_state_d = 1'h0;
      M_snk_hd_state_d[(x + (3'h5 * y) + (5'h19 * z))*1+0-:1] = 1'h1;
      M_food_state_d = 125'h00000000000000000000000000000001 << (food_pos[8+3-:4] + (3'h5 * food_pos[4+3-:4]) + (5'h19 * food_pos[0+3-:4]));
    end
    M_led_state_d = M_snk_hd_state_q;
    M_rows_d = 5'h01;
    if (M_rows_q == 5'h10) begin
      M_cols_d = M_led_state_q[0+24-:25];
      M_rows_d = 5'h01;
    end else begin
      if (M_rows_q == 5'h01) begin
        M_cols_d = M_led_state_q[25+24-:25];
        M_rows_d = 5'h02;
      end else begin
        if (M_rows_q == 5'h02) begin
          M_cols_d = M_led_state_q[50+24-:25];
          M_rows_d = 5'h04;
        end else begin
          if (M_rows_q == 5'h04) begin
            M_cols_d = M_led_state_q[75+24-:25];
            M_rows_d = 5'h08;
          end else begin
            if (M_rows_q == 5'h08) begin
              M_cols_d = M_led_state_q[100+24-:25];
              M_rows_d = 5'h10;
            end
          end
        end
      end
    end
    led_rows_out = M_rows_q;
    led_cols_out = M_cols_q;
  end
  
  always @(posedge M_muxclk_value) begin
    M_rows_q <= M_rows_d;
    M_cols_q <= M_cols_d;
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_snk_hd_state_q <= 1'h0;
      M_snk_bd_state_q <= 1'h0;
      M_snk_tl_state_q <= 1'h0;
      M_food_state_q <= 1'h0;
      M_led_state_q <= 1'h0;
      M_count_q <= 1'h0;
    end else begin
      M_snk_hd_state_q <= M_snk_hd_state_d;
      M_snk_bd_state_q <= M_snk_bd_state_d;
      M_snk_tl_state_q <= M_snk_tl_state_d;
      M_food_state_q <= M_food_state_d;
      M_led_state_q <= M_led_state_d;
      M_count_q <= M_count_d;
    end
  end
  
endmodule
