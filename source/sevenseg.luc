module sevenseg (
    input clk,
    input rst,
    input d[16], //a 16 bit number to display (will be truncated)
    output q[14] //14 channel out into the actual seg
  ) {

  sig tens_out[7];
  sig ones_out[7];
  
  .clk(clk) {
    .rst(rst) {
      dff ones[16];
      dff tens[16];
      dff ones_mod[4];
      dff tens_mod[4];
    }
  }

  always {
   
    if(ones.q > 10) {
      ones.d = ones.q - 10;
    }
    else {
      ones_mod.d = ones.q[3:0];
      ones.d = d;
    }   
    
    if(tens.q > 10) {
      tens.d = tens.q - 10;
    }
    else {
      tens_mod.d = tens.q[3:0];
      tens.d = d/10;
    }
        

    case (ones_mod.q) {
        1: 
          ones_out = 7b0110000;
        2: 
          ones_out = 7b1101101;
        3: 
          ones_out = 7b1111001;
        4: 
          ones_out = 7b0110011;
        5: 
          ones_out = 7b1011011;
        6: 
          ones_out = 7b1011111;
        7: 
          ones_out = 7b1110000;
        8: 
          ones_out = 7b1111111;
        9: 
          ones_out = 7b1110011;      
        default: 
          ones_out = 7b1111110; 
    }
    case (tens_mod.q) {
        1: 
          tens_out = 7b0110000;
        2: 
          tens_out = 7b1101101;
        3: 
          tens_out = 7b1111001;
        4: 
          tens_out = 7b0110011;
        5: 
          tens_out = 7b1011011;
        6: 
          tens_out = 7b1011111;
        7: 
          tens_out = 7b1110000;
        8: 
          tens_out = 7b1111111;
        9: 
          tens_out = 7b1110011;         
        default: 
          tens_out = 7b1111110; 
    }


    q = c{tens_out, ones_out};
  }
}
