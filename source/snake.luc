module snake (
    input clk,  // clock
    input rst,  // reset
    input dx[4],
    input dy[4],
    input dz[4],
    input wesnkhd,
    input wesnkpos,
    output snk_hd_pos[12],
    output snk_bd_pos[12],
    output snk_tl_pos[12],  
    output x[4],  
    output y[4],  
    output z[4]
  ) {
  

  .clk(clk)
  {
    .rst(rst)
    {
      //these flip flops are meant to support ease of translation of head position + wrap checking
      dff hd_x[4];
      dff hd_y[4];
      dff hd_z[4];
      
      //these flip flops are meant to sustain the signals and support ease of comparison
      dff hd_pos[12];
      dff bd_pos[12];
      dff tl_pos[12]; 
    }
  }

  always {

    //if game fsm is in move_snake state, receive controls
    if(wesnkhd) {
      hd_x.d = (hd_x.q + dx);
      hd_y.d = (hd_y.q + dy);
      hd_z.d = (hd_z.q + dz);

      //check wrap x
      if((hd_x.q + dx) == 15) {
        hd_x.d = 4;
      }
      if((hd_x.q + dx) == 5) {
        hd_x.d = 0;
      }

      //check wrap y
      if((hd_y.q + dy) == 15) {
        hd_y.d = 4;
      }
      if((hd_y.q + dy) == 5) {
        hd_y.d = 0;
      }

      //check wrap z
      if((hd_z.q + dz) == 15) {
        hd_z.d = 4;
      }
      if((hd_z.q + dz) == 5) {
        hd_z.d = 0;
      }
    }
    
    //we need a second we signal because this needs to occur in the next clock cycle AFTER the register have been written to
    if(wesnkpos) {            
      hd_pos.d = c{hd_x.q, hd_y.q, hd_z.q};
      //update body to old head value
      bd_pos.d = hd_pos.q;
      //update tail to old body value
      tl_pos.d = bd_pos.q;
    }


    //output position
    snk_hd_pos = hd_pos.q;
    snk_bd_pos = bd_pos.q;
    snk_tl_pos = tl_pos.q;    
    
    x = hd_x.q;
    y = hd_y.q;
    z = hd_z.q;
    
  }
}
