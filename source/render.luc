module render (
    input clk,  // clock
    input rst,  // reset
    input snk_hd_pos[12],
    input snk_bd_pos[12],
    input snk_tl_pos[12],  
    input food_pos[12],  
    input wernd,
    output led_rows_out[5],
    output led_cols_out[25],
    input dx[4],
    input dy[4],
    input dz[4]
  ) {
  
    
  const NUMBER_ROWS = 5;
  const NUMBER_COLUMNS = 25;
  
  sig hd_x[4];
  sig hd_y[4];
  sig hd_z[4];
  sig bd_x[4];
  sig bd_y[4];
  sig bd_z[4];
  sig tl_x[4];
  sig tl_y[4];
  sig tl_z[4];
  sig fd_x[4];
  sig fd_y[4];
  sig fd_z[4];
  
  .clk(clk)
  {
    .rst(rst)
    {
      counter muxclk(#SIZE(1),#DIV(15));

      dff snk_hd_state[125];
      dff snk_bd_state[125];
      dff snk_tl_state[125];
      dff food_state[125];
      dff led_state[125];
      
      dff count[16];
    } 
  }
  
  .clk(muxclk.value) {
      dff rows[NUMBER_ROWS];
      dff cols[NUMBER_COLUMNS];
  }

  const TEMPLATE = 125b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001;
    
  always {    
  
    hd_x = snk_hd_pos[11:8];
    hd_y = snk_hd_pos[7:4];
    hd_z = snk_hd_pos[3:0];
    
    bd_x = snk_bd_pos[11:8];
    bd_y = snk_bd_pos[7:4];
    bd_z = snk_bd_pos[3:0];
    
    tl_x = snk_tl_pos[11:8];
    tl_y = snk_tl_pos[7:4];
    tl_z = snk_tl_pos[3:0];
    
    fd_x = food_pos[11:8];
    fd_y = food_pos[7:4];
    fd_z = food_pos[3:0];
    
    //if render state, load up the position to the led_state
    if(wernd)
    {
      count.d = (count.q + 1);
      //snk_hd_state.d = TEMPLATE << count.q;
      
      //snk_hd_state.d = c{dx,dy,dz} << 50;
      //snk_hd_state.d = 0;
      //snk_hd_state.d[hd_x + (5*hd_y) + (25*hd_z)] = 1;
      
      //snk_bd_state.d = 0;
      //snk_bd_state.d[bd_x + (bd_y*5) + (bd_z*25)] = 1;
      
      //snk_tl_state.d = 0;
      //snk_tl_state.d[tl_x + (tl_y*5) + (tl_z*25)] = 1;
      
      food_state.d = 0;
      food_state.d[fd_x + (5*fd_y) + (25*fd_z)] = 1;
      
      //food_state.d = TEMPLATE << (food_pos[11:8] + (NUMBER_ROWS * food_pos[7:4]) + (NUMBER_COLUMNS * food_pos[3:0]));
      //led_state.d = snk_hd_state.q | snk_bd_state.q | snk_tl_state.q | food_state.q;
    }
    
    led_state.d = (snk_hd_state.q);
    //led_state.d = (snk_hd_state.q | snk_bd_state.q | snk_tl_state.q | food_state.q);
    
    rows.d = 5b00001;
    
        
    //read respective cols for state
    //if it is currently showing 10000, 
    //means next clock cycle should
    //emit rows = 00001 and the lsbs of cols 
    if (rows.q == 5b10000)
    {
        cols.d = led_state.q[24:0];
        rows.d = 5b00001;  
    }    
    else if(rows.q == 5b00001)
    {
        cols.d = led_state.q[49:25];  
        rows.d = 5b00010;   
    }     
    else if(rows.q == 5b00010)
    {
        cols.d = led_state.q[74:50]; 
        rows.d = 5b00100;     
    }    
    else if(rows.q == 5b00100)
    {
        cols.d = led_state.q[99:75];  
        rows.d = 5b01000;      
    }   
    else if(rows.q == 5b01000)
    {
        cols.d = led_state.q[124:100];
        rows.d = 5b10000; 
    }   
    
    led_rows_out = rows.q;
    led_cols_out = cols.q; 
    
    //led_rows_out = 5x{1};
    //led_cols_out = 25x{1};
  }
}
