module gameengine (
    input clk,              // 50MHz clock
    input rst,            // reset button (active low)
    input time_out, //taken in from the timer module, meaning that time has run out
    input aluout[16],
    input game_start,
    input game_end,
    output opcode[19]
  ) {
  
  const OPC_CMP_TIME_FRAME = 19b1101010000000000000;
  const OPC_CMP_FOOD = 19b1100110101000000000;
  const OPC_INCREMENT_SCORE = 19b0000001010000100000;
  const OPC_MOVE_SNK_HD  = 19b0000000000100000100;
  const OPC_UPDATE_SNK_POS = 19b0000000000010000000;
  const OPC_SPAWN_FOOD = 19b0000000000001000000;
  const OPC_RENDER = 19b0000000000000011000; //reset clock counter AND writes render state to output led state
  const OPC_HALT = 19b0000000000000000010;
  const OPC_RESET = 19b0000000000000000001; //reset everything
  
  
  .clk(clk)
  {
    .rst(rst)
    {
      fsm gamefsm = {WAIT_FRAME, CHECK_TIME, GAME_OVER, GAME_START, CHECK_EAT, INCREMENT_SCORE, SPAWN_FOOD, MOVE_SNK_HD, UPDATE_SNAKE_POS, CHECK_WRAP, RENDER};
    }
  }

  //TODO: need to check if ALUOUT gives the answer in the same clock cycle. If not, the opcodes
  //must be sent out in the previous state/clock cycle
  always {


      opcode = 0;
      case(gamefsm.q)
      {
        gamefsm.WAIT_FRAME:
          opcode = OPC_CMP_TIME_FRAME; //request to compare FRAME_PERIOD < clk_count
          if(aluout == 1) {//if FRAME_PERIOD <  clk_count => next state          
            gamefsm.d = gamefsm.CHECK_TIME;            
          }          
        
        gamefsm.CHECK_TIME:          
          if(time_out == 1) {//if time > 60 seconds (from timer module)
            gamefsm.d = gamefsm.GAME_OVER;            
          }
          else {
            gamefsm.d = gamefsm.CHECK_EAT;
          }
        
        gamefsm.CHECK_EAT:
          opcode = OPC_CMP_FOOD; //request to compare snk_pos and food_pos
          if(aluout == 1) {//if snk_pos == food_pos          
            gamefsm.d = gamefsm.INCREMENT_SCORE;            
          }
          else {
            gamefsm.d = gamefsm.MOVE_SNK_HD; //if didn't eat just move snake this clk
          }
        gamefsm.INCREMENT_SCORE:          
          opcode = OPC_INCREMENT_SCORE; //request to increment score and write to score
          gamefsm.d = gamefsm.SPAWN_FOOD;

        gamefsm.SPAWN_FOOD:
          opcode = OPC_SPAWN_FOOD;
          gamefsm.d = gamefsm.MOVE_SNK_HD;

        gamefsm.MOVE_SNK_HD:
          opcode = OPC_MOVE_SNK_HD;
          gamefsm.d = gamefsm.UPDATE_SNAKE_POS;

        gamefsm.UPDATE_SNAKE_POS:
          opcode = OPC_UPDATE_SNK_POS;
          gamefsm.d = gamefsm.RENDER;

        gamefsm.RENDER:                 
          opcode = OPC_RENDER; 
          gamefsm.d = gamefsm.WAIT_FRAME;

        gamefsm.GAME_OVER:
          if(game_start) {
            gamefsm.d = gamefsm.GAME_START;
          }
          else {
            opcode = OPC_HALT;
            gamefsm.d = gamefsm.GAME_OVER;
          }

        gamefsm.GAME_START:
          //SEND RESET SIGNAL
          opcode = OPC_RESET;
          gamefsm.d = gamefsm.CHECK_TIME;
      }
      
      //force game end if stop pressed
      if(game_end) {
        gamefsm.d = gamefsm.GAME_OVER;
      }
  }
}