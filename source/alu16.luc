//This module handles the opcode routing into submodules:
//submodules: adder, compare, boolean, shift
//it also writes these modules to the output
//this module acts as the selector multiplexer
module alu16
(
    input a[16],
    input b[16],
    input alufn[6],
    
    output out[16],
    output z,
    output v,
    output n
) {
    adder16 adder;
    compare16 compare;
    boolean16 boole;
    shift16 shift;

    always{
        //initialize with value
        out = 0;

        //adder
        adder.alufn = alufn;
        adder.a = a;                
        adder.b = b;  

        z = adder.z;              
        v = adder.v;              
        n = adder.n;              
        
        //boolean
        boole.alufn = alufn;
        boole.a = a;                
        boole.b = b;                  
        
        //shift
        shift.alufn = alufn;
        shift.a = a;                
        shift.b = b;         

        //compare
        compare.alufn = alufn;
        compare.z = adder.z; 
        compare.v = adder.v;
        compare.n = adder.n;          

        //mux selector
        case(alufn[5:4])
        {
            2b00: //SELECT ADDER
                out = adder.out;                
            2b01: //SELECT BOOLEAN
                out = boole.out;                
            2b10: //SELECT SHIFT
                out = shift.out;                
            2b11: //SELECT COMPARE
                out = compare.out;                
        }

        //test case for erroneous output
        if(alufn[5:0] == 6b111111)
        {
            out = -839;
        }
    }
}