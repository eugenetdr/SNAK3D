module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    input button[6],
    //input y_button[2],
    //input z_button[2],
    input game_button[2],
    output col_led[25],
    output layer_gnd[5]
    //output io_led [3][8],   // LEDs on IO Shield
    //output io_seg [8],      // 7-segment LEDs on IO Shield
    //output io_sel [4],      // Digit select on IO Shield
    //input io_button [5],    // 5 buttons on IO Shield
    //input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  //alu
  alu16 alu;  
  sel4 aselector;
  sel4 bselector;
    
    controllogic clogic;
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;

    .rst(rst){                        
      gameengine game;

      //modules
      controls control;
      snake snake;
      score score;
      timer timer;
      food food;
      render render;
    }
  }

    
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port    
       
    
    bselector.d = 0;

    //ALU circuit
    game.aluout = alu.out;
    alu.alufn = clogic.alufn;
    alu.a = aselector.out;
    alu.b = bselector.out;


    //control logic
    clogic.opcode = game.opcode;
    aselector.sel = clogic.asel;
    bselector.sel = clogic.bsel;
    control.buttons[5:0] = button[5:0];
    //control.buttons[3:2] = y_button[1:0];
    //control.buttons[5:4] = z_button[1:0];
    

    //==========module inputs==========
    //snake
    snake.dx = control.dx;
    snake.dy = control.dy;
    snake.dz = control.dz;
    snake.wesnkhd = clogic.wesnkhd;    
    snake.wesnkpos = clogic.wesnkpos;    

    //score
    score.aluout = alu.out;
    score.wescr = clogic.wescr;    
    //timer    
    timer.wetmr = clogic.wetmr;
    //food
    food.wefood = clogic.wefood;
    
    //render circuits
    render.snk_hd_pos = snake.snk_hd_pos;
    render.snk_bd_pos = snake.snk_bd_pos;
    render.snk_tl_pos = snake.snk_tl_pos;
    render.x = snake.x;
    render.y = snake.y;
    render.z = snake.z;
    
    render.food_pos = food.food_pos;
    render.wernd = clogic.wernd;
    layer_gnd[4:0] = render.led_rows_out[4:0];
    col_led[24:0] = render.led_cols_out[24:0];

    //==========module outputs==========        
    //snake
    aselector.b = snake.snk_hd_pos;
    //score
    aselector.c = score.out;
    bselector.c = 1; //for score increment
    //timer
    game.time_out = timer.time_out;
    aselector.a = timer.frame_period;
    bselector.a = timer.clk_count;
    aselector.d = 0; //for timer reset after render
    //food
    bselector.b = food.food_pos;    
  
    //testing
    //io_led[2][5:0] = timer.game_time;
    //io_led[1][3:0] = snake.snk_hd_pos[11:8]; 
    //io_led[0][7:4] = snake.snk_hd_pos[7:4]; 
    //io_led[0][3:0] = snake.snk_hd_pos[3:0]; 
  }
}