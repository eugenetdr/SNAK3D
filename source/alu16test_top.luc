module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
      counter slowclk(#SIZE(1),#DIV(25));
      
      tester test;
    }
  }

  alu16 alu;
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits

    //mode selctor
    test.mode = io_dip[2][7];
    
    //pass fail test case selector
    test.type = io_dip[2][6];
    
    //io_dip[2][7:2] represents ALUFN and is passed into "test" and "alu" modules
    test.alufn_dip = io_dip[2][5:0];
    alu.alufn = test.alufn_out[5:0];
    
    
    test.alu_z = alu.z;
    test.alu_v = alu.v;
    test.alu_n = alu.n;

    //the test values of "a" and "b" come from "test" module, and are passed into our alu module
    alu.a = test.a_out;
    alu.b = test.b_out;

    //switches in io_dip[1:0] change value of B only (A is fixed to be -840, a random negative number we chose)
    test.b_dip[15:8] = io_dip[1];
    test.b_dip[7:0] = io_dip[0];
    
    //the output of the alu is passed to the test module to be tested
    test.alu_out = alu.out;
    
    
    //io_led[1:0] represents ALU_OUT
    if (io_dip[2][7]) {
    io_led[0] = alu.out[7:0]; 
    io_led[1] = alu.out[15:8];
    }
    else {
      io_led[0][7:0] = test.fsmout; 
    }

    //io_led[2] indicates if it passes test cases (Light up = PASS)
    io_led[2] = test.out;
     
  }
}